using System.Linq;
using UnityEngine;
using UnityEngine.Scripting;
using System.Collections.Generic;

public abstract class BaseMapper<TAsset, TKey> : AutoGeneratedScriptable where TAsset : Object {
    [SerializeField] protected List<ValueKeyPair> assets = new();
    public IReadOnlyList<ValueKeyPair> Assets => assets;
    protected TAsset this[int index] => assets[index].Asset;

    [System.Serializable]
    public struct ValueKeyPair {
        public TAsset Asset;
        public TKey Key;
    }

    [Preserve]
    public TAsset GetByKey(TKey key) =>
        (from item in assets where item.Key.Equals(key) select item.Asset)
        .FirstOrDefault();

    [Preserve] // Will be called with reflection
    public void Set(TAsset asset, TKey key) {
        assets.Add(new ValueKeyPair {
            Asset = asset,
            Key = key
        });
    }
}