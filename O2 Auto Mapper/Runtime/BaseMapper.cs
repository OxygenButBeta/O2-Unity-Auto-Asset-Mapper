using System.Linq;
using UnityEngine;
using UnityEngine.Scripting;
using System.Collections.Generic;

public abstract class BaseMapper<TAsset, TKey> : AutoGeneratedScriptable where TAsset : Object {
    [SerializeField] List<ValueKeyPair> assets = new();
    public IReadOnlyList<ValueKeyPair> Assets => assets;
    protected TAsset this[int index] => assets[index].Asset;

    /// <summary>
    /// Represents a pair of asset and key.
    /// </summary>
    [System.Serializable]
    public struct ValueKeyPair {
        public TAsset Asset;
        public TKey Key;
    }

    /// <summary>
    /// Gets the asset by key.
    /// If there are multiple assets with the same key, it returns the first one.
    /// It will not create a new instance of the asset, it will return the existing one.
    /// Try to avoid using this method if you need to instantiate the asset.
    /// </summary>
    /// <param name="key"></param>
    /// <param name="reverseSearch"></param>
    /// <returns></returns>
    [Preserve]
    public TAsset GetMappedAssetViaKey(TKey key, bool reverseSearch = false) {
        return reverseSearch
            ? (from item in assets.AsEnumerable()!.Reverse()
                where item.Key.Equals(key)
                select item.Asset)
            .FirstOrDefault()
            : (from item in assets where item.Key.Equals(key) select item.Asset)
            .FirstOrDefault();
    }


    /// <summary>
    /// Gets the asset by key and instantiates it.
    /// If the asset is not found, it may throw an exception or return null.
    /// If the type is not compatible, it may throw an exception.
    /// </summary>
    /// <param name="key"></param>
    /// <returns></returns>
    public TAsset InstantiateByKey(TKey key) {
        return Instantiate(GetMappedAssetViaKey(key));
    }

    [Preserve] // Will be called with reflection
    public void Set(TAsset asset, TKey key) {
        assets.Add(new ValueKeyPair {
            Asset = asset,
            Key = key
        });
    }
}